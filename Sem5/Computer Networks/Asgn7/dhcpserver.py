import socket

HOST = '127.0.0.1'      # Standard loopback interface address (localhost)
OWNport = 65100         # Port to listen on (non-privileged ports are > 1023)

# Create a UDP Socket
server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server.bind((HOST, OWNport))
print("DHCP Server Started!")

startAddress = '127.0.0.3'
prefixAddress = '127.0.0.'
Range = 250             # at max 250 clients can connect

# 250 temporary ip's starting from 127.0.0.3 to 127.0.0.252
l = [i for i in range(3, 3 + Range)]
availablePool = set(l) 
# dictionary to map current client's address with 
# temporary IP address generated by DHCP
currentClients = dict() 
cnt = 0

while True:
    message, address = server.recvfrom(1024)
    message = message.decode()

    if message == 'Request IP':
        print("Temporary IP Requested...")
        temp = availablePool.pop()  # getting an available IP
        tempAddress = prefixAddress + str(temp) # generating temporary IP
        currentClients[tempAddress] = temp  # updating the current client dict
        cnt += 1
        print("Temporary IP [" + tempAddress + "] allocated!")
        print("Currently " + str(cnt) + " clients are online\n")
        server.sendto(str.encode(tempAddress), address)
    else:
        print("IP Deallocation Requested...")
        temp = currentClients[message]  
        print("Deallocating IP [" + message + "]...")
        currentClients.pop(message) # deleting this from current client dict
        availablePool.add(temp) # making this IP available again
        cnt -= 1
        print("Deallocated IP [" + message + "]!")
        print("Currently " + str(cnt) + " clients are online\n")
